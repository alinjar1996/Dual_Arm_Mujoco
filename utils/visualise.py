"""
Utility for visualising the grasps generated by DA-2 around an object
"""

import mujoco 
import mujoco.viewer
from controllers.utils.utils import *
import numpy as np
import trimesh
import argparse as ap
import sys

parser = ap.ArgumentParser(prog="visualise", description="visualise grasps made by DA-2")

parser.add_argument("-d", "--model", type=str, help="""Choose variant of gripper.
                    'panda' for panda arm gripper 'minimal' for skeleton fork gripper""")

parser.add_argument("-m","--toggle-mocap", type=str, help=""" Choose whether to toggle MoCap visuals
                    'True' for visuals, 'False' otherwise default is True""")

parser.add_argument("-g","--graspIdx",type=int,help="""Select Grasp index as indexed by DA-2 Dataset
                    default best grasp is at index 15
                    NOTE: Not all grasps are feasible or ideal""")

args = parser.parse_args()


model_path = "/home/autrio/college-linx/RRC/MuJoCo-Dual-Arm/models/utils/visualisationModel.xml"

model = mujoco.MjModel.from_xml_path(model_path)
data = mujoco.MjData(model)
viewer = mujoco.viewer.launch_passive(
    model=model,
    data=data,
    show_left_ui=False,
    show_right_ui=False)

# model.opt.gravity = 0.0

if(not args.graspIdx):
    graspIdx = 15
else:
    graspIdx = args.graspIdx



grasps = np.load("examples/grasps/GraspChair.npy")
graspL = grasps[graspIdx][0]
graspR = grasps[graspIdx][1]
object_scale = -10
# object_scale = 0.024724145342293464
objStrPos = [0.2,0.0,0.32]
objStrOri = [-90,0,0]


Util = RotationUtils()

final_pose_L = Util.Tmat2pose(graspL,1,objStrPos,objStrOri)
final_pose_R = Util.Tmat2pose(graspR,1,objStrPos,objStrOri)


keyFrameQpos = np.zeros(18)
keyFrameQpos[:3] = final_pose_L[0]
keyFrameQpos[3:7] = final_pose_L[1]
keyFrameQpos[7:9] = np.array([0.04,0.04])
keyFrameQpos[9:12] = final_pose_R[0]
keyFrameQpos[12:16] = final_pose_R[1]
keyFrameQpos[16:18] = np.array([0.04,0.04])

key_id = model.key("home").id

model.key("home").qpos[:18] = keyFrameQpos
mujoco.mj_resetDataKeyframe(model, data, key_id)
mujoco.mj_forward(model, data)
viewer.opt.frame = mujoco.mjtFrame.mjFRAME_SITE
mcL = model.body("targetL").mocapid[0]
mcR = model.body("targetR").mocapid[0]



while(viewer.is_running()):
    model.key("home").qpos[:18] = keyFrameQpos
    mujoco.mj_resetDataKeyframe(model, data, key_id)
    data.mocap_pos[mcL] = final_pose_L[0]
    data.mocap_quat[mcL] = final_pose_L[1]
    data.mocap_pos[mcR] = final_pose_R[0]
    data.mocap_quat[mcR] = final_pose_R[1]
    # data.site("mocapL").xpos = graspL[:3,3:].reshape(1,3)[0]
    # data.site("mocapR").xpos = graspR[:3,3:].reshape(1,3)[0]
    # data.site("mocapL").xmat = graspL[:3,:3].flatten()[0]
    # data.site("mocapR").xmat = graspR[:3,:3].flatten()[0]


    mujoco.mj_forward(model,data)
    mujoco.mj_step(model,data)
    viewer.sync()


